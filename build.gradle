buildscript {
	ext {
		springBootVersion = '2.2.5.RELEASE'
		//springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'org.wisepersist:gwt-gradle-plugin:1.0.6'
		//classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'gwt'
//apply plugin: 'com.moowork.node'

/*plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "com.moowork.node" version "1.3.1"
}*/


group = 'com.consul_media'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
def GWT_VERSION = '2.8.2'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql' //'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	compileOnly("com.google.gwt:gwt-user:${GWT_VERSION}")
	compileOnly("com.google.gwt:gwt-dev:${GWT_VERSION}")
	compileOnly('org.fusesource.restygwt:restygwt:2.2.3')

	compile('javax.ws.rs:javax.ws.rs-api:2.1')
	//compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jetty')
	compile('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
	}

	//annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

}

test {
	//useJUnitPlatform()
	exclude '**/*'
}

gwt {
	gwtVersion = GWT_VERSION
	modules 'com.consul_media.SpringBootGwt'
	maxHeapSize = "1024M"
}

//compileJava.dependsOn(processResources)

bootJar.dependsOn compileGwt
bootJar {
	//baseName = 'todo-list'
	//version = '1.0.0'

	into('BOOT-INF/classes/static') {
		from compileGwt.outputs
	}
}

//react - фронт сборка
/*
task copyWebApp(type: Copy) {
	from 'src/main/webapp/build'
	into 'build/resources/main/static/.'
}

task appNpmInstall(type: NpmTask) {
	description = "Installs all dependencies from package.json"
	workingDir = file("${project.projectDir}/src/main/webapp")
	args = ["install"]
}

task appNpmBuild(type: NpmTask) {
	description = "Builds production version of the webapp"
	workingDir = file("${project.projectDir}/src/main/webapp")
	args = ["run", "build"]
}

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp

node {
	download = true
	repositories.whenObjectAdded {
		if (it instanceof IvyArtifactRepository) {
			metadataSources {
				artifact()
			}
		}
	}

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")
}
 */